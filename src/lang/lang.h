#pragma once

enum LangText {
    LANG_TEXT_STATS,
    LANG_TEXT_BTC,
    LANG_TEXT_FEE,
    LANG_TEXT_DIFF,
    LANG_TEXT_GHASH,
    LANG_TEXT_HEIGHT,
    LANG_TEXT_AVG_HASHRATE,
    LANG_TEXT_RUNNING_TIME,
    LANG_TEXT_TOTAL_HASHES,
    LANG_TEXT_BLOCK_TEMPL,
    LANG_TEXT_BEST_DIFF,
    LANG_TEXT_SHARES_32BITS,
    LANG_TEXT_VALID_BLOCKS,
    LANG_TEXT_POOL,
    LANG_TEXT_IP,
    LANG_TEXT_SHOULD_SAVE_CONFIG,
    LANG_TEXT_ENTERED_CONFIG_MODE,
    LANG_TEXT_CONFIG_SSID,
    LANG_TEXT_CONFIG_IP_ADDRESS,
    LANG_TEXT_ERASING_CONFIG_RESTARTING,
    LANG_TEXT_BUTTON_FORCE_CONFIG_MODE,
    LANG_TEXT_ALLDONE,
    LANG_TEXT_FAILED_CONNECT_TIMEOUT,
    LANG_TEXT_FAILED_CONNECT_WIFI_TIMEOUT,
    LANG_TEXT_WIFI_CONNECTED,
    LANG_TEXT_IP_ADDRESS_COLON,
    LANG_TEXT_POOLSTRING,
    LANG_TEXT_PORTNUMBER,
    LANG_TEXT_POOLPASSWORD,
    LANG_TEXT_BTCSTRING,
    LANG_TEXT_TIMEZONE_FROMUTC,
    LANG_TEXT_INVERT_COLORS,
    LANG_TEXT_BRIGHTNESS,
    LANG_TEXT_CONNECTED_CURRENT_IP,
    LANG_TEXT_ERROR_CURRENT_STATUS,
    LANG_TEXT_MAX
};

struct LanguagePack {
    const char* text[LANG_TEXT_MAX];
};

extern const LanguagePack LanguagePack_en;
extern const LanguagePack LanguagePack_zh_tw;
extern const LanguagePack LanguagePack_ja;
extern const LanguagePack* CurrentLang;
void setCurrentLang(uint8_t lang);

#define LANG_TEXT_STATS (CurrentLang->text[LANG_TEXT_STATS])
#define LANG_TEXT_BTC (CurrentLang->text[LANG_TEXT_BTC])
#define LANG_TEXT_FEE (CurrentLang->text[LANG_TEXT_FEE])
#define LANG_TEXT_DIFF (CurrentLang->text[LANG_TEXT_DIFF])
#define LANG_TEXT_GHASH (CurrentLang->text[LANG_TEXT_GHASH])
#define LANG_TEXT_HEIGHT (CurrentLang->text[LANG_TEXT_HEIGHT])
#define LANG_TEXT_AVG_HASHRATE (CurrentLang->text[LANG_TEXT_AVG_HASHRATE])
#define LANG_TEXT_RUNNING_TIME (CurrentLang->text[LANG_TEXT_RUNNING_TIME])
#define LANG_TEXT_TOTAL_HASHES (CurrentLang->text[LANG_TEXT_TOTAL_HASHES])
#define LANG_TEXT_BLOCK_TEMPL (CurrentLang->text[LANG_TEXT_BLOCK_TEMPL])
#define LANG_TEXT_BEST_DIFF (CurrentLang->text[LANG_TEXT_BEST_DIFF])
#define LANG_TEXT_SHARES_32BITS (CurrentLang->text[LANG_TEXT_SHARES_32BITS])
#define LANG_TEXT_VALID_BLOCKS (CurrentLang->text[LANG_TEXT_VALID_BLOCKS])
#define LANG_TEXT_POOL (CurrentLang->text[LANG_TEXT_POOL])
#define LANG_TEXT_IP (CurrentLang->text[LANG_TEXT_IP])
#define LANG_TEXT_SHOULD_SAVE_CONFIG (CurrentLang->text[LANG_TEXT_SHOULD_SAVE_CONFIG])
#define LANG_TEXT_ENTERED_CONFIG_MODE (CurrentLang->text[LANG_TEXT_ENTERED_CONFIG_MODE])
#define LANG_TEXT_CONFIG_SSID (CurrentLang->text[LANG_TEXT_CONFIG_SSID])
#define LANG_TEXT_CONFIG_IP_ADDRESS (CurrentLang->text[LANG_TEXT_CONFIG_IP_ADDRESS])
#define LANG_TEXT_ERASING_CONFIG_RESTARTING (CurrentLang->text[LANG_TEXT_ERASING_CONFIG_RESTARTING])
#define LANG_TEXT_BUTTON_FORCE_CONFIG_MODE (CurrentLang->text[LANG_TEXT_BUTTON_FORCE_CONFIG_MODE])
#define LANG_TEXT_ALLDONE (CurrentLang->text[LANG_TEXT_ALLDONE])
#define LANG_TEXT_FAILED_CONNECT_TIMEOUT (CurrentLang->text[LANG_TEXT_FAILED_CONNECT_TIMEOUT])
#define LANG_TEXT_FAILED_CONNECT_WIFI_TIMEOUT (CurrentLang->text[LANG_TEXT_FAILED_CONNECT_WIFI_TIMEOUT])
#define LANG_TEXT_WIFI_CONNECTED (CurrentLang->text[LANG_TEXT_WIFI_CONNECTED])
#define LANG_TEXT_IP_ADDRESS_COLON (CurrentLang->text[LANG_TEXT_IP_ADDRESS_COLON])
#define LANG_TEXT_POOLSTRING (CurrentLang->text[LANG_TEXT_POOLSTRING])
#define LANG_TEXT_PORTNUMBER (CurrentLang->text[LANG_TEXT_PORTNUMBER])
#define LANG_TEXT_POOLPASSWORD (CurrentLang->text[LANG_TEXT_POOLPASSWORD])
#define LANG_TEXT_BTCSTRING (CurrentLang->text[LANG_TEXT_BTCSTRING])
#define LANG_TEXT_TIMEZONE_FROMUTC (CurrentLang->text[LANG_TEXT_TIMEZONE_FROMUTC])
#define LANG_TEXT_INVERT_COLORS (CurrentLang->text[LANG_TEXT_INVERT_COLORS])
#define LANG_TEXT_BRIGHTNESS (CurrentLang->text[LANG_TEXT_BRIGHTNESS])
#define LANG_TEXT_CONNECTED_CURRENT_IP (CurrentLang->text[LANG_TEXT_CONNECTED_CURRENT_IP])
#define LANG_TEXT_ERROR_CURRENT_STATUS (CurrentLang->text[LANG_TEXT_ERROR_CURRENT_STATUS])

